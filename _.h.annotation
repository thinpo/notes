/*
 * _.h.annotation - Core Macro Definitions and Type System
 *
 * This file represents the foundational layer of a highly optimized array programming
 * language implementation. It demonstrates masterful use of C macros to create a
 * domain-specific language that achieves both extreme performance and code density.
 *
 * DESIGN PHILOSOPHY:
 * - Single-character naming convention for maximum code density
 * - Consistent parameter ordering (z=right arg, y=left arg, i=index)
 * - Heavy use of GCC statement expressions for inline computation
 * - Tagged union type system encoded in 64-bit values
 * - SIMD-first design with vector types as primitives
 */

/* ============================================================================
 * POLYNOMIAL EVALUATION MACRO
 * ============================================================================ */

#define p6(z,a,b,c,d,e,f) ({E $=z;a+$*(b+$*(c+$*(d+$*(e+$*f))));})
/*
 * Horner's method for evaluating 6th degree polynomials.
 * Uses statement expression to avoid multiple evaluation of z.
 * Critical for fast transcendental function approximation.
 * The '$' temporary prevents side effects while maintaining performance.
 */

/* ============================================================================
 * TYPE CASTING SHORTCUTS
 * ============================================================================ */

#define ye (E)yi        // Cast y[i] to float vector
#define ze (E)zi        // Cast z[i] to float vector
#define zg (G)zi        // Cast z[i] to byte vector
/*
 * These provide zero-cost type conversions between vector types.
 * The naming follows the pattern: [source][destination] where
 * y/z = left/right operand, e/g/i = float/byte/int, [i] = indexed
 */

/* ============================================================================
 * UNSIGNED TYPE ALIASES
 * ============================================================================ */

#define iH unsigned H   // Unsigned height
#define iI unsigned I   // Unsigned int vector
#define iJ unsigned J   // Unsigned 64-element vector
/*
 * Creates unsigned versions of vector types. The 'i' prefix indicates
 * unsigned (following the convention i=int, but unsigned int here).
 * H/I/J represent different vector sizes: 16/32/64 elements.
 */

/* ============================================================================
 * POINTER TYPE SHORTCUTS
 * ============================================================================ */

#define IR I*R          // Int vector pointer to result
#define EZ E*Z          // Float vector pointer to Z operand
#define EY E*Y          // Float vector pointer to Y operand
#define ER E*R          // Float vector pointer to result
#define eY e*Y          // Scalar float pointer to Y
/*
 * These macros encode the common pattern of "type * parameter name".
 * Used extensively in function signatures to reduce visual noise.
 * The pattern is [type][pointer_name] where type can be:
 * - E: float vector, e: scalar float
 * - I: int vector, i: scalar int
 * - G: byte vector, g: scalar byte
 */

/* ============================================================================
 * VALUE EXTRACTION MACROS
 * ============================================================================ */

#define gy (char)(U)y   // Extract byte from tagged value y
#define pz (1l<<59>z)   // Test if z is a pointer (high bit clear)
#define bt (L[t]%16)    // Extract bit count from type t
/*
 * These extract specific fields from tagged 64-bit values:
 * - gy: Safely extract byte value handling type coercion
 * - pz: Pointer test - pointers have high bit clear, immediates set
 * - bt: Maps type codes to bit widths using lookup table L
 */

/* ============================================================================
 * FUNCTION DEFINITION MACROS
 * ============================================================================ */

#define UG(g,x) U(g,x,Gz)           // Unsigned function, byte vector arg
#define GU(g,x) D(G,g,x,Uz)        // Byte vector function, unsigned arg
#define Gg(g,x) D(G,g,x,ii,Gz)     // Byte vector function, index + byte vector
#define GF(g,x) D(G,g,x,Gy,Gz)     // Byte vector function, two byte vectors
/*
 * These create specialized function definition patterns:
 * - First letter indicates return type (U=unsigned, G=byte vector)
 * - Second letter indicates primary argument type
 * - Pattern: RETURN_INPUT(name, body, arg_types...)
 *
 * This system eliminates repetitive function signatures while maintaining
 * type safety and enabling aggressive compiler optimization.
 */

#define Ef(g,x) D(E,g,x,Ez)         // Float vector function, one float vector
#define If(g,x) D(I,g,x,Iz)         // Int vector function, one int vector
#define Ig(g,x) D(I,g,x,ii,Iz)      // Int vector function, index + int vector
#define IF(g,x) D(I,g,x,Iy,Iz)      // Int vector function, two int vectors
/*
 * Continuation of function definition macros for numeric types.
 * The systematic naming allows the reader to immediately understand
 * function signatures without verbose declarations.
 */

/* ============================================================================
 * STATIC VARIABLE DECLARATIONS
 * ============================================================================ */

#define ZI static I     // Static int vector
#define ZE static E     // Static float vector
#define ZJ static J     // Static 64-element vector
#define ZG static G     // Static byte vector
#define ZU static U     // Static unsigned
/*
 * 'Z' prefix indicates static storage class.
 * Combined with type letters for concise static declarations.
 * Critical for avoiding function call overhead on constants.
 */

/* ============================================================================
 * GENERIC PROGRAMMING MACROS
 * ============================================================================ */

#define V_(g,x,a...) void g(a){x;}  // Void function with varargs
#define G(g,x) U(g,x,ii,Uy,Uz)     // Generic binary operation
#define U(g,x,a...) D(U,g,x,a)     // Unsigned function definition
#define D(t,g,x,a...) static t g(a){return({x;});}  // Master function definer
/*
 * The D() macro is the foundation of the entire function definition system:
 * - t: return type
 * - g: function name
 * - x: function body (as statement expression)
 * - a...: parameter list
 *
 * This allows extremely concise function definitions while maintaining
 * full C type checking and optimization opportunities.
 */

/* ============================================================================
 * MIN/MAX MACROS WITH SIDE-EFFECT PROTECTION
 * ============================================================================ */

#define l(a,b) ({typeof(b)$=b;(a)<$?(a):$;})  // Min with single evaluation
#define m(a,b) ({typeof(b)$=b;(a)>$?(a):$;})  // Max with single evaluation
/*
 * These prevent double evaluation of arguments using GCC statement expressions.
 * The typeof() ensures type compatibility while $ prevents side effects.
 * Critical for safe macro-based programming with complex expressions.
 */

/* ============================================================================
 * PARAMETER NAME SHORTCUTS
 * ============================================================================ */

#define Iy I y          // Int vector parameter y
#define Iz I z          // Int vector parameter z
#define Ez E z          // Float vector parameter z
#define Ea E a          // Float vector parameter a
#define Gy G y          // Byte vector parameter y
/*
 * These encode the pattern "type parameter_name" for function signatures.
 * Reduces visual noise in complex function definitions while maintaining
 * full type information for the compiler.
 */

/* ============================================================================
 * CONTROL FLOW MACROS
 * ============================================================================ */

#define P(b,x) if(b)return({x;});   // Early return with expression
#define W(x) while(({x;}))          // While loop with statement expression
#define $(b,x) if(b){x;}else        // If-then-else with dangling else
/*
 * These create more concise control flow:
 * - P(): Early return pattern common in error checking
 * - W(): While loop that can use complex conditions
 * - $(): If statement that chains with else naturally
 */

/* ============================================================================
 * ARRAY INDEXING SHORTCUTS
 * ============================================================================ */

#define ri r[i]         // r array indexed by i
#define rj r[j]         // r array indexed by j
#define Ci C[i]         // C array indexed by i
#define zi z[i]         // z array indexed by i
#define yi y[i]         // y array indexed by i
/*
 * Simple but effective macro to reduce visual noise in array operations.
 * Critical in a language that does extensive array processing.
 * The systematic naming makes array code much more readable.
 */

/* ============================================================================
 * VECTOR TYPE SYSTEM
 * ============================================================================ */

#define v(n) __attribute((vector_size(1<<n),aligned(1)))
typedef unsigned long(*_)(),U,J v(6);      // 64-element vectors
typedef char G v(6),_G v(6-2);             // Byte vectors: 64 and 16 elements
typedef int I v(6),I_ v(6+2);              // Int vectors: 16 and 256 elements
typedef float e,E v(6),E_ v(6+2);          // Float vectors: scalar, 16, and 256 elements
#undef v
/*
 * BRILLIANT VECTOR TYPE DESIGN:
 *
 * Uses GCC vector extensions to create SIMD types as language primitives.
 * The v(n) macro creates vectors of size 2^n bytes:
 * - v(6) = 64 bytes = 16 floats or 16 ints or 64 bytes
 * - v(6+2) = 256 bytes = 64 floats (AVX-512 extended)
 * - v(6-2) = 16 bytes = 4 floats (SSE compatibility)
 *
 * Type naming convention:
 * - Capital letters (E, I, G) = vector types
 * - Lowercase letters (e, i, g) = scalar types
 * - _ suffix = extended size vectors
 *
 * The alignment ensures optimal SIMD performance across all architectures.
 */

/* ============================================================================
 * PREDEFINED CONSTANTS
 * ============================================================================ */

ZG Z0,I0={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};
ZE E0;
ZI Z2,I2={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
/*
 * Pre-initialized vector constants for common operations:
 * - Z0: Zero vector (all types)
 * - I0: Identity permutation vector (0..63)
 * - E0: Zero float vector
 * - Z2, I2: Identity vectors for smaller operations (0..15)
 *
 * These eliminate initialization overhead for frequent operations
 * like permutations, masks, and identity transforms.
 */

/* ============================================================================
 * BIT MANIPULATION UTILITIES
 * ============================================================================ */

static char*L="60123456789:;456";  // Type-to-bits lookup table
#define b(i) ((1L<<i)-1)           // Create bit mask with i bits set
/*
 * L[] encodes bit widths for different type codes:
 * - Maps type numbers to ASCII chars representing bit counts
 * - b(i) creates masks efficiently using bit shifts
 * - Essential for the tagged value system's bit field extraction
 */

/* ============================================================================
 * BUILTIN FUNCTION SHORTCUTS
 * ============================================================================ */

u(ue,*(unsigned*)&e,ee)                    // Float-to-bits reinterpret cast
e(eu,*(e*)&i,ii)                          // Bits-to-float reinterpret cast
f(n3,7+z>>3)                              // Round up to 8-byte boundary
f(n4,15+z>>4)                             // Round up to 16-byte boundary
f(n6,63+z>>6)                             // Round up to 64-byte boundary
f(n9,511+z>>9)                            // Round up to 512-byte boundary
/*
 * These implement critical low-level operations:
 * - ue/eu: Type punning for float/int conversions (preserves bit patterns)
 * - n3/n4/n6/n9: Alignment calculations for different vector sizes
 * - Essential for memory layout optimization and SIMD alignment
 */

/* ============================================================================
 * TAGGED VALUE FIELD EXTRACTION
 * ============================================================================ */

#define tz (15&z>>59)               // Extract type field (4 bits)
#define bz (L[tz]%16)              // Extract bit width for type
#define iz (int)(U)z               // Extract integer value
#define ez eu(z)                   // Extract float value
/*
 * TAGGED VALUE SYSTEM:
 *
 * The entire language uses 64-bit tagged values where:
 * - Bits 59-63: Type information (16 possible types)
 * - Bits 0-58: Payload (value, pointer, or compound data)
 *
 * This technique, called "nan-boxing" or "pointer tagging":
 * - Eliminates separate type fields (saves memory)
 * - Enables fast type dispatch
 * - Allows immediate values without allocation
 * - Maintains IEEE 754 compatibility for floats
 */

/* ============================================================================
 * COMPILER INTRINSIC SHORTCUTS
 * ============================================================================ */

#define o(o) __builtin_##o          // GCC builtin function access
/*
 * Provides clean access to compiler intrinsics like:
 * - o(clzl): Count leading zeros
 * - o(ctzl): Count trailing zeros
 * - o(popcountl): Population count
 * Essential for bit manipulation and SIMD operations.
 */

/* ============================================================================
 * EXPRESSION MACROS WITH TEMPORARIES
 * ============================================================================ */

#define z(b,_) ({typeof(b)z=b;_;})  // Execute _ with z bound to b
#define r(b,_) ({typeof(b)r=b;_;r;}) // Execute _ with r bound to b, return r
/*
 * These create temporary bindings to prevent multiple evaluation:
 * - z(): Bind expression to local 'z', execute code
 * - r(): Bind expression to local 'r', execute code, return r
 *
 * Critical for safe macro programming with side effects.
 * The typeof() preserves exact types through complex expressions.
 */

/* ============================================================================
 * LOOP CONSTRUCTS
 * ============================================================================ */

#define i(b,e) {unsigned $=b;ii=0;while(i<$){e;++i;}}    // for(i=0;i<b;i++)
#define h(n,x) {unsigned $=n;ih=0;while(h<$){x;++h;}}    // for(h=0;h<n;h++)
#define j(n,x) {unsigned $=n;ij=0;while(j<$){x;++j;}}    // for(j=0;j<n;j++)
/*
 * Concise loop macros that:
 * - Create local scope to prevent variable conflicts
 * - Use $ to cache loop bound (prevents re-evaluation)
 * - Follow consistent naming: i, h, j for nested loops
 * - Enable very compact loop expressions in array operations
 */

/* ============================================================================
 * SWITCH-CASE ALTERNATIVES
 * ============================================================================ */

#define $3(z,a,b,c) ({unsigned $=z;!$?a:1==$?b:c;})
#define $4(z,a,b,c,d) ({unsigned $=z;!$?a:1==$?b:2==$?c:d;})
#define $5(z,a,b,c,d,e) ({unsigned $=z;!$?a:1==$?b:2==$?c:3==$?d:e;})
// ... continues through $9
/*
 * BRILLIANT SWITCH REPLACEMENT:
 *
 * These macros replace switch statements with ternary expressions:
 * - More compact than switch/case
 * - Can be used in expression context
 * - Generate optimal jump tables
 * - No fall-through issues
 * - The $ binding prevents multiple evaluation of the selector
 *
 * Usage: $4(opcode, add_op, sub_op, mul_op, default_op)
 */

/* ============================================================================
 * I/O AND STRING FUNCTIONS
 * ============================================================================ */

e we(e);                                    // Write float to stdout
U wr(ii,ss);                               // Write n bytes from string
f(wc,wr(1,&z);0)                           // Write single character
/*
 * Minimal I/O interface:
 * - we(): Float output with optimal formatting
 * - wr(): Raw byte output
 * - wc(): Single character output
 *
 * The pattern f(wc,...) creates a function that discards its argument
 * after performing side effects (write character, return 0).
 */

/* ============================================================================
 * INTEGER TO STRING CONVERSION
 * ============================================================================ */

U(wi,char d[16];ss=d+15;*s=10;ij=i>>31?-i:i;do*--s=48+j%10;W(j/=10);if(i>>31)*--s='-';wr(d+16-s,s);i,ii)
/*
 * OPTIMIZED INTEGER FORMATTING:
 *
 * This single statement implements full integer-to-decimal conversion:
 * 1. Allocate 16-byte buffer on stack
 * 2. Start from end of buffer (right-to-left construction)
 * 3. Handle sign bit using arithmetic right shift test
 * 4. Convert digits using division/modulo
 * 5. Add minus sign if negative
 * 6. Output the constructed string
 *
 * Demonstrates the power of statement expressions to pack complex
 * algorithms into single "expressions" that can be used anywhere.
 */

/* ============================================================================
 * HEX OUTPUT FUNCTION
 * ============================================================================ */

f(wu,char d[17];d[16]=10;i(16,in=15&z>>60-4*i;d[i]="0W"[9<n]+n)wr(17,d);z)
/*
 * Hex output with newline:
 * 1. 17-byte buffer (16 hex digits + newline)
 * 2. Extract 4-bit nibbles from high to low
 * 3. Convert to hex using clever ASCII math
 * 4. The "0W" string provides digit/letter boundary
 *
 * The expression 9<n selects between "0123456789" and "ABCDEF" ranges.
 */

/* ============================================================================
 * STRING UTILITIES
 * ============================================================================ */

U(ic,char*d=s;W(g-*s)++s;s-d,gg,ss)       // Find character g in string s
U(wn,wr(i,s);wc(10),ii,ss)                // Write string + newline
U(ws,wn(ic(0,s),s),ss)                    // Write null-terminated string
/*
 * String processing primitives:
 * - ic(): Character search (returns offset)
 * - wn(): Write string with newline
 * - ws(): Write null-terminated string
 *
 * Notice the consistent parameter ordering and return patterns.
 * The W() macro creates while loops that terminate on character match.
 */

/*
 * OVERALL DESIGN ASSESSMENT:
 *
 * This header file demonstrates several masterful techniques:
 *
 * 1. MACRO DOMAIN-SPECIFIC LANGUAGE:
 *    Creates a specialized language within C that's optimized for
 *    array programming operations while maintaining full C compatibility.
 *
 * 2. SYSTEMATIC NAMING CONVENTIONS:
 *    Single-character names that follow consistent patterns across
 *    the entire codebase, enabling extremely dense but readable code.
 *
 * 3. TAGGED UNION TYPE SYSTEM:
 *    Eliminates memory overhead of separate type fields while enabling
 *    fast runtime type dispatch and immediate value optimizations.
 *
 * 4. SIMD-FIRST DESIGN:
 *    Makes vector operations the default, with scalars as special cases.
 *    This matches modern CPU architectures and enables massive parallelism.
 *
 * 5. ZERO-COST ABSTRACTIONS:
 *    Every macro compiles to optimal machine code with no runtime overhead.
 *    The abstractions exist purely to reduce source code complexity.
 *
 * 6. EXPRESSION-ORIENTED PROGRAMMING:
 *    Heavy use of statement expressions allows complex operations to be
 *    embedded anywhere expressions are valid, enabling very compact code.
 *
 * This represents decades of expertise in language implementation,
 * compiler optimization, and systems programming distilled into a
 * remarkably compact and elegant foundation.
 */
